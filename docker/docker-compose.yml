services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres_iot
    restart: always
    ports:
      - "5433:5432"  # Puerto local:puerto contenedor
    environment:
      POSTGRES_DB: db_iot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - iot-net

  # Zookeeper para coordinar nodos Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - iot-net

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - iot-net

  # Interfaz web para monitorear Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - iot-net

  # API Spring Boot
  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: api-iot
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - iot-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Simulador TCP/IP (ESP32)
  tcp-simulator:
    build:
      context: ../simulators/tcp-simulator
    container_name: tcp-simulator
    depends_on:
      - api
    environment:
      ESP32_SIMULATOR_API_KEY: sensor-esp32-tcp-key-519494H1494948T
      ESP32_SIMULATOR_PORT: 6000
      ESP32_SIMULATOR_HOST: api
      ESP32_SIMULATOR_INTERVAL_MILLIS: 2500
    networks:
      - iot-net

  # Simulador Kafka (Zigbee)
  kafka-simulator:
    build:
      context: ../simulators/kafka-simulator
    container_name: kafka-simulator
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_SIMULATOR_API_KEY: sensor-zigbee-mqtt-key-15464813J57L
      KAFKA_SIMULATOR_DELAY_MS: 1000
      KAFKA_TOPIC: iot-sensor-data
    networks:
      - iot-net

# Volumen persistente para PostgreSQL
volumes:
  pgdata:

# Red compartida entre todos los servicios
networks:
  iot-net:
    driver: bridge